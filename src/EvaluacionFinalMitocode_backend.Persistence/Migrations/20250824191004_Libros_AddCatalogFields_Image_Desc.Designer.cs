// <auto-generated />
using EvaluacionFinalMitocode_backend.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EvaluacionFinalMitocode_backend.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250824191004_Libros_AddCatalogFields_Image_Desc")]
    partial class Libros_AddCatalogFields_Image_Desc
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("ClienteSeq", "Users");

            modelBuilder.HasSequence<int>("LibroSeq", "Productos");

            modelBuilder.Entity("EvaluacionFinalMitocode_backend.Entities.Cliente", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasDefaultValueSql("'CLT' + RIGHT(REPLICATE('0', 4) + CAST(NEXT VALUE FOR [Users].[ClienteSeq] AS VARCHAR(10)), 4)");

                    b.Property<bool>("ActiveStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DNI")
                        .IsUnique()
                        .HasDatabaseName("IX_Cliente_DNI");

                    b.HasIndex("Apellidos", "Nombres")
                        .HasDatabaseName("IX_Cliente_Apellidos_Nombres");

                    b.ToTable("Clientes", "Users", t =>
                        {
                            t.HasCheckConstraint("CK_Users_Clientes_DNI", "LEN([DNI]) = 8 AND [DNI] NOT LIKE '%[^0-9]%'");

                            t.HasCheckConstraint("CK_Users_Clientes_Edad", "[Edad] BETWEEN 0 AND 120");
                        });
                });

            modelBuilder.Entity("EvaluacionFinalMitocode_backend.Entities.Libro", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasDefaultValueSql("'LBR' + RIGHT(REPLICATE('0', 4) + CAST(NEXT VALUE FOR [Productos].[LibroSeq] AS VARCHAR(10)), 4)");

                    b.Property<bool>("ActiveStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Disponible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ExtendedDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("UnitPrice")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("Autor")
                        .HasDatabaseName("IX_Productos_Libros_Autor");

                    b.HasIndex("ISBN")
                        .HasDatabaseName("IX_Productos_Libros_ISBN");

                    b.HasIndex("Titulo")
                        .HasDatabaseName("IX_Productos_Libros_Titulo");

                    b.HasIndex("Titulo", "Autor")
                        .HasDatabaseName("IX_Libro_Titulo_Autor");

                    b.HasIndex("Titulo", "Disponible")
                        .HasDatabaseName("IX_Productos_Libros_Titulo_Disponible")
                        .HasFilter("[ActiveStatus] = 1");

                    b.ToTable("Libros", "Productos", t =>
                        {
                            t.HasCheckConstraint("CK_Productos_Libros_ISBN_DigitsOnly", "[ISBN] NOT LIKE '%[^0-9]%'");

                            t.HasCheckConstraint("CK_Productos_Libros_UnitPrice_NonNegative", "[UnitPrice] >= 0");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
