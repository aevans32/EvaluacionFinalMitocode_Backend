using EvaluacionFinalMitocode_backend.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace EvaluacionFinalMitocode_backend.Persistence.Configurations;

public class ClienteConfiguration : IEntityTypeConfiguration<Cliente>
{
    public void Configure(EntityTypeBuilder<Cliente> builder)
    {
        builder.ToTable("Clientes", schema: "Users");

        // PK: string generated by DB -> "CLT" + 4 digits
        builder.HasKey(c => c.Id);

        builder.Property(c => c.Id)
               .IsRequired()
               .HasMaxLength(7)        // "CLT0001" = 7 chars
               .IsUnicode(false)
               .ValueGeneratedOnAdd()
               .HasDefaultValueSql(
                   // 4-digit variant (max 9,999)
                   "'CLT' + RIGHT(REPLICATE('0', 4) + CAST(NEXT VALUE FOR [Users].[ClienteSeq] AS VARCHAR(10)), 4)"
               );

        builder.Property(c => c.ActiveStatus)
            .IsRequired()
            .HasDefaultValue(true)
            .ValueGeneratedOnAdd();

        // Campos de dominio
        builder.Property(c => c.Nombres).IsRequired().HasMaxLength(100);
        builder.Property(c => c.Apellidos).IsRequired().HasMaxLength(100);
        builder.Property(c => c.DNI).IsRequired().HasMaxLength(8).IsUnicode(false);
        builder.Property(c => c.Edad).IsRequired();
        builder.Property(c => c.Email).IsRequired().HasMaxLength(200);

        // FK opcional hacia AspNetUsers(Id) sin navegación en Entities (evita dependencia circular)
        builder.Property(c => c.UserId)
               .HasMaxLength(450); // Identity usa string keys largos

        builder.HasOne<EFUserIdentity>()         // shadow nav
               .WithMany()
               .HasForeignKey(c => c.UserId)
               .OnDelete(DeleteBehavior.Restrict)
               .HasConstraintName("FK_Clientes_UserId_AuthUser");

        // Indexes

        builder.HasIndex(c => c.DNI).IsUnique().HasDatabaseName("IX_Cliente_DNI");
        builder.HasIndex(c => c.Email).IsUnique().HasDatabaseName("IX_Cliente_Email");
        builder.HasIndex(c => new { c.Apellidos, c.Nombres}).HasDatabaseName("IX_Cliente_Apellidos_Nombres");

        // Constraints

        builder.ToTable(tb =>
        {
            tb.HasCheckConstraint("CK_Users_Clientes_Edad", "[Edad] BETWEEN 0 AND 120");
            tb.HasCheckConstraint("CK_Users_Clientes_DNI", "LEN([DNI]) = 8 AND [DNI] NOT LIKE '%[^0-9]%'");
        });

    }
}
